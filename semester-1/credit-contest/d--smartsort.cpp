/*
# Задача D(2). SmartSort [АиСД 2023]

**Ограничение времени**: 1 секунда
**Ограничение памяти**: 256.0 Мб
**Ввод**: стандартный ввод или input.txt
**Вывод**: стандартный вывод или output.txt

## Медведь тоже сортирует. Мишка! Смотри, какая у меня сладкая жизнь настала!

Машины родители уехали в город за покупками. Чтобы Маша не скучала, они оставили ей большущий мешок с леденцами разного размера. И сначала Маша и правда съедала по одному леденцу в час (хотя обещала не больше одного в день), но потом поняла, что одного мало.

Девочка побежала к своему лесному другу похвастаться, как ей везет: сколько у нее леденцов. Маша нашла Мишку и стала хвастаться, как быстро она съедает один леденец.

Леденцов было много, терпения Мишки тоже.

"Этот леденец я съела за 5 секунд"
"А вот этот самый большой, его я сгрызла за 1 минуту."

Мишка так отчаялся, что стал в блокнотик записывать количество скорость поедания Машиных леденцов. И так до тех пор, пока у Маши не закончились конфеты и она не пошла домой.

Придя домой, Мишка решил числа в блокнотике выстроить по неубыванию.

Заметьте, Маша съедала каждый леденец за целое количество секунд, при этом не дольше, чем за 60 секунд.

## Формат ввода

На первой строке вводится число N (1 ≤ N ≤ 10^5).

На второй строчке вводится N чисел, каждое из которых не превышает 60.

## Формат вывода

Выведите последовательность чисел, отсортированную по неубыванию.

## Пример

### Ввод
```
5
2 3 9 2 9
```
### Вывод
```
2 2 3 9 9
```
 */
#include <iostream>

int Partition(int* arr, int left, int right) {
  int pivot = arr[right];
  int i = left;
  for (int j = left; j < right; j++) {
    if (arr[j] < pivot) {
      std::swap(arr[i], arr[j]);
      i++;
    }
  }
  std::swap(arr[i], arr[right]);
  return i;
}

void QuickSort(int* arr, int left, int right) {
  if (left < right) {
    int pivot = Partition(arr, left, right);
    QuickSort(arr, left, pivot - 1);
    QuickSort(arr, pivot + 1, right);
  }
}

void QuickSort(int* arr, int n) {
  QuickSort(arr, 0, n - 1);
}

int main() {
  int n;
  std::cin >> n;
  auto arr = new int[n];
  for (int i = 0; i < n; i++) {
    std::cin >> arr[i];
  }
  QuickSort(arr, n);
  for (int i = 0; i < n; i++) {
    std::cout << arr[i] << ' ';
  }
  return 0;
}
