/*
# D. Банкомат

**Ограничение времени:** 1 секунда
**Ограничение памяти:** 256Mb
**Ввод:** стандартный ввод или input.txt
**Вывод:** стандартный вывод или output.txt

## Задача

В некотором государстве в обращении находятся банкноты определенных номиналов. Национальный банк хочет, чтобы банкомат выдавал любую запрошенную сумму при помощи минимального числа банкнот, считая, что запас банкнот каждого номинала неограничен. Помогите Национальному банку решить эту задачу.

## Формат ввода

Первая строка входных данных содержит натуральное число N не превосходящее 100 — количество номиналов банкнот в обращении. Вторая строка входных данных содержит натуральное число S, не превосходящее 10^6 — сумму, которую необходимо выдать. Вторая строка входных данных содержит N различных натуральных чисел x1, x2, ..., xN, не превосходящих 10^6 — номиналы банкнот.

## Формат вывода

Программа должна найти представление числа S виде суммы слагаемых из множества xi, содержащее минимальное число слагаемых и вывести в первой строке число слагаемых, а во второй само представление на экран (в виде последовательности чисел, разделенных пробелами). Если таких представлений существует несколько, то программа должна вывести любое (одно) из них. Если такое представление не существует, то программа должна вывести одно число -1 (минус один).

## Пример

**Ввод**

```
5
40
1 3 7 12 32
```

**Вывод**

```
3
1 7 32
```
 */
#include <iostream>

int main() {
  int n;
  std::cin >> n;
  int s;
  std::cin >> s;
  int* money = new int[n];
  for (int i = 0; i < n; i++) {
    std::cin >> money[i];
  }
  int* dp = new int[s + 1];

  for (int i = 0; i <= s; i++) {
    dp[i] = static_cast<int>(10e9);
  }
  dp[0] = 0;
  for (int i = 0; i < n; i++) {
    dp[money[i]] = 1;
  }
  for (int i = 1; i <= s; i++) {
    for (int j = 0; j < n; j++) {
      dp[i] = (money[j] <= i && dp[i] > dp[i - money[j]] + 1) ? dp[i - money[j]] + 1 : dp[i];
    }
  }
  if (dp[s] != 10e9) {
    std::cout << dp[s] << '\n';
    while (s > 0) {
      for (int i = 0; i < n; i++) {
        if (money[i] <= s && dp[s] == dp[s - money[i]] + 1) {
          std::cout << money[i] << ' ';
          s -= money[i];
        }
      }
    }
  } else {
    std::cout << "-1";
  }
  delete[] dp;
}